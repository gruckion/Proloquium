[test_csv_processor.py]
```python
"""Unit tests for CSVProcessor class."""

import csv
from typing import Any, List
from unittest import mock

import pytest

from csv_processor import CSVProcessor


@pytest.fixture
def csv_processor():
    """Return CSVProcessor instance for testing."""
    input_file = "input.csv"
    output_file = "output.csv"
    header = ["col1", "col2", "col3"]
    return CSVProcessor(input_file, output_file, header)


@pytest.fixture
def input_csv_data():
    """Return input CSV data for testing."""
    return [["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"]]


def test_read_input_csv(csv_processor, input_csv_data, monkeypatch):
    """Test read_input_csv method of CSVProcessor class."""
    # Arrange
    mock_open = mock.mock_open(read_data="")
    monkeypatch.setattr("builtins.open", mock_open)

    # Act
    rows = csv_processor.read_input_csv()

    # Assert
    mock_open.assert_called_once_with(csv_processor.input_file)
    csv_reader = csv.reader()
    assert rows == input_csv_data


def test_process_csv(csv_processor, input_csv_data):
    """Test process_csv method of CSVProcessor class."""
    # Act
    processed_rows = csv_processor.process_csv(input_csv_data)

    # Assert
    expected_processed_rows = [["A", "B", "C"], ["D", "E", "F"], ["G", "H", "I"]]
    assert processed_rows == expected_processed_rows


def test_write_output_csv(csv_processor, input_csv_data, monkeypatch):
    """Test write_output_csv method of CSVProcessor class."""
    # Arrange
    mock_open = mock.mock_open()
    monkeypatch.setattr("builtins.open", mock_open)

    # Act
    csv_processor.write_output_csv(input_csv_data)

    # Assert
    mock_open.assert_called_once_with(csv_processor.output_file, mode="w")
    csv_writer = csv.writer()
    csv_writer.writerow.assert_called_once_with(csv_processor.header)
    csv_writer.writerows.assert_called_once_with(input_csv_data)
```