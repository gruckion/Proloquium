============================= test session starts ==============================
platform darwin -- Python 3.9.15, pytest-7.3.0, pluggy-1.0.0
rootdir: /Users/sigex/workdir/proloquium
collected 3 items

logs/20230415212329/test_csv_processor.py .FF                            [100%]

=================================== FAILURES ===================================
_______________________________ test_process_csv _______________________________

input_csv_data = [('Name', 'Age', 'City'), ('Alice', '25', 'New York'), ('Bob', '30', 'Los Angeles'), ('Charlie', '35', 'Chicago'), ('David', '40', 'Houston')]

    def test_process_csv(input_csv_data):
        """Test CSVProcessor.process_csv method."""
        # Create a sample process function
        def process_func(row):
            name, age, city = row
            return (name.upper(), int(age) + 1, city.lower())
    
        # Call the process_csv method and assert the output
>       output_csv_data = CSVProcessor.process_csv(input_csv_data, process_func)

logs/20230415212329/test_csv_processor.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
logs/20230415212329/csv_processor.py:36: in process_csv
    processed_row = process_func(row)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

row = ('Name', 'Age', 'City')

    def process_func(row):
        name, age, city = row
>       return (name.upper(), int(age) + 1, city.lower())
E       ValueError: invalid literal for int() with base 10: 'Age'

logs/20230415212329/test_csv_processor.py:42: ValueError
___________________________ test_generate_output_csv ___________________________

input_csv_data = [('Name', 'Age', 'City'), ('Alice', '25', 'New York'), ('Bob', '30', 'Los Angeles'), ('Charlie', '35', 'Chicago'), ('David', '40', 'Houston')]
tmp_path = PosixPath('/private/var/folders/mv/dtw39jks6ml64s3pd1pnv_640000gn/T/pytest-of-sigex/pytest-12/test_generate_output_csv0')

    def test_generate_output_csv(input_csv_data, tmp_path):
        """Test CSVProcessor.generate_output_csv method."""
        # Create a sample output CSV file
        file_path = tmp_path / 'output.csv'
    
        # Call the generate_output_csv method and assert the output file contents
        with patch('builtins.open', mock_open()) as mock_file:
            CSVProcessor.generate_output_csv(str(file_path), input_csv_data)
            mock_file.assert_called_once_with(str(file_path), mode='w', newline='')
>           mock_file().writerow.assert_has_calls(
                [call(row) for row in input_csv_data],
                any_order=True,
            )

logs/20230415212329/test_csv_processor.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='open()' id='4327478656'>, name = 'writerow'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
>               raise AttributeError("Mock object has no attribute %r" % name)
E               AttributeError: Mock object has no attribute 'writerow'

/opt/homebrew/Cellar/python@3.9/3.9.15/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:630: AttributeError
=========================== short test summary info ============================
FAILED logs/20230415212329/test_csv_processor.py::test_process_csv - ValueErr...
FAILED logs/20230415212329/test_csv_processor.py::test_generate_output_csv - ...
========================= 2 failed, 1 passed in 0.08s ==========================
